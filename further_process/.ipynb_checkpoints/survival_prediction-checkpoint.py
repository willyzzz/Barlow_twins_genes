{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "abb25835-407b-41c9-8968-296fa5d775e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MB-0000</th>\n",
       "      <td>2999</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0002</th>\n",
       "      <td>1484</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0005</th>\n",
       "      <td>3053</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0006</th>\n",
       "      <td>1721</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0008</th>\n",
       "      <td>1241</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7295</th>\n",
       "      <td>5906</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7296</th>\n",
       "      <td>1342</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7297</th>\n",
       "      <td>5279</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7298</th>\n",
       "      <td>2587</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7299</th>\n",
       "      <td>5893</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1981 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         time  status\n",
       "MB-0000  2999       0\n",
       "MB-0002  1484       0\n",
       "MB-0005  3053       0\n",
       "MB-0006  1721       0\n",
       "MB-0008  1241       1\n",
       "...       ...     ...\n",
       "MB-7295  5906       0\n",
       "MB-7296  1342       1\n",
       "MB-7297  5279       1\n",
       "MB-7298  2587       1\n",
       "MB-7299  5893       0\n",
       "\n",
       "[1981 rows x 2 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sksurv.linear_model import CoxPHSurvivalAnalysis\n",
    "from sksurv.util import Surv\n",
    "from sksurv.nonparametric import kaplan_meier_estimator\n",
    "from sksurv.metrics import concordance_index_censored\n",
    "import scipy.cluster.hierarchy as sch\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import umap\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.manifold import TSNE\n",
    "import torch\n",
    "from lifelines import KaplanMeierFitter\n",
    "np.random.seed(42)\n",
    "\n",
    "path = '../Synapse_metabric/Clinical_Overall_Survival_Data_from_METABRIC.txt'\n",
    "surv = pd.read_csv(path, index_col=0, sep=',')\n",
    "surv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a4ae816b-40a8-4ffc-8723-d0460322fd71",
   "metadata": {},
   "outputs": [],
   "source": [
    "pam50_path = '../Synapse_metabric/Complete_METABRIC_Clinical_Features_Data.txt'\n",
    "pam50 = pd.read_csv(pam50_path, index_col=0, sep=',', on_bad_lines='skip')\n",
    "pam50 = pam50[['NOT_IN_OSLOVAL_Pam50Subtype']]\n",
    "pam50 = pam50.rename(columns={\"NOT_IN_OSLOVAL_Pam50Subtype\": \"Pam50Subtype\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc48d7d3-46fd-4c95-8f79-dd160ed76aec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pam50Subtype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MB-0000</th>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0005</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0006</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0008</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0010</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7295</th>\n",
       "      <td>LumA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7296</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7297</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7298</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7299</th>\n",
       "      <td>LumB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1913 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Pam50Subtype\n",
       "MB-0000       Normal\n",
       "MB-0005         LumB\n",
       "MB-0006         LumB\n",
       "MB-0008         LumB\n",
       "MB-0010         LumB\n",
       "...              ...\n",
       "MB-7295         LumA\n",
       "MB-7296         LumB\n",
       "MB-7297         LumB\n",
       "MB-7298         LumB\n",
       "MB-7299         LumB\n",
       "\n",
       "[1913 rows x 1 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pam50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c6486c5-5f4b-4a27-a5c1-b3fc5c3f8961",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>16185</th>\n",
       "      <th>16186</th>\n",
       "      <th>16187</th>\n",
       "      <th>16188</th>\n",
       "      <th>16189</th>\n",
       "      <th>16190</th>\n",
       "      <th>16191</th>\n",
       "      <th>16192</th>\n",
       "      <th>16193</th>\n",
       "      <th>16194</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MB-0000</th>\n",
       "      <td>0.418219</td>\n",
       "      <td>0.152488</td>\n",
       "      <td>0.167391</td>\n",
       "      <td>0.193790</td>\n",
       "      <td>0.085427</td>\n",
       "      <td>0.464295</td>\n",
       "      <td>0.104066</td>\n",
       "      <td>0.290806</td>\n",
       "      <td>0.272616</td>\n",
       "      <td>0.580954</td>\n",
       "      <td>...</td>\n",
       "      <td>0.285407</td>\n",
       "      <td>0.403359</td>\n",
       "      <td>0.548733</td>\n",
       "      <td>0.403750</td>\n",
       "      <td>0.194559</td>\n",
       "      <td>0.657663</td>\n",
       "      <td>0.494058</td>\n",
       "      <td>0.306183</td>\n",
       "      <td>0.481686</td>\n",
       "      <td>0.308071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0002</th>\n",
       "      <td>0.405360</td>\n",
       "      <td>0.491409</td>\n",
       "      <td>0.398066</td>\n",
       "      <td>0.434640</td>\n",
       "      <td>0.157899</td>\n",
       "      <td>0.516106</td>\n",
       "      <td>0.099787</td>\n",
       "      <td>0.354238</td>\n",
       "      <td>0.288308</td>\n",
       "      <td>0.731903</td>\n",
       "      <td>...</td>\n",
       "      <td>0.552136</td>\n",
       "      <td>0.331161</td>\n",
       "      <td>0.547798</td>\n",
       "      <td>0.475887</td>\n",
       "      <td>0.306815</td>\n",
       "      <td>0.432194</td>\n",
       "      <td>0.426856</td>\n",
       "      <td>0.287898</td>\n",
       "      <td>0.560337</td>\n",
       "      <td>0.589266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0005</th>\n",
       "      <td>0.176485</td>\n",
       "      <td>0.167589</td>\n",
       "      <td>0.223399</td>\n",
       "      <td>0.309239</td>\n",
       "      <td>0.136554</td>\n",
       "      <td>0.146337</td>\n",
       "      <td>0.102777</td>\n",
       "      <td>0.174579</td>\n",
       "      <td>0.314562</td>\n",
       "      <td>0.555112</td>\n",
       "      <td>...</td>\n",
       "      <td>0.537151</td>\n",
       "      <td>0.446916</td>\n",
       "      <td>0.660317</td>\n",
       "      <td>0.350423</td>\n",
       "      <td>0.181673</td>\n",
       "      <td>0.568682</td>\n",
       "      <td>0.317989</td>\n",
       "      <td>0.192962</td>\n",
       "      <td>0.548685</td>\n",
       "      <td>0.711381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0006</th>\n",
       "      <td>0.303367</td>\n",
       "      <td>0.089394</td>\n",
       "      <td>0.280586</td>\n",
       "      <td>0.281603</td>\n",
       "      <td>0.207387</td>\n",
       "      <td>0.316298</td>\n",
       "      <td>0.182998</td>\n",
       "      <td>0.140095</td>\n",
       "      <td>0.233456</td>\n",
       "      <td>0.505399</td>\n",
       "      <td>...</td>\n",
       "      <td>0.350992</td>\n",
       "      <td>0.546245</td>\n",
       "      <td>0.483318</td>\n",
       "      <td>0.471808</td>\n",
       "      <td>0.292479</td>\n",
       "      <td>0.496924</td>\n",
       "      <td>0.663253</td>\n",
       "      <td>0.280508</td>\n",
       "      <td>0.592944</td>\n",
       "      <td>0.292956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0008</th>\n",
       "      <td>0.596919</td>\n",
       "      <td>0.470614</td>\n",
       "      <td>0.328998</td>\n",
       "      <td>0.339462</td>\n",
       "      <td>0.248083</td>\n",
       "      <td>0.302336</td>\n",
       "      <td>0.207619</td>\n",
       "      <td>0.179386</td>\n",
       "      <td>0.263447</td>\n",
       "      <td>0.633223</td>\n",
       "      <td>...</td>\n",
       "      <td>0.576174</td>\n",
       "      <td>0.267847</td>\n",
       "      <td>0.508746</td>\n",
       "      <td>0.519425</td>\n",
       "      <td>0.309202</td>\n",
       "      <td>0.461302</td>\n",
       "      <td>0.337007</td>\n",
       "      <td>0.173220</td>\n",
       "      <td>0.378357</td>\n",
       "      <td>0.474492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7295</th>\n",
       "      <td>0.457776</td>\n",
       "      <td>0.179208</td>\n",
       "      <td>0.169827</td>\n",
       "      <td>0.288497</td>\n",
       "      <td>0.314609</td>\n",
       "      <td>0.251180</td>\n",
       "      <td>0.234931</td>\n",
       "      <td>0.221818</td>\n",
       "      <td>0.225260</td>\n",
       "      <td>0.470970</td>\n",
       "      <td>...</td>\n",
       "      <td>0.518137</td>\n",
       "      <td>0.348740</td>\n",
       "      <td>0.452896</td>\n",
       "      <td>0.279217</td>\n",
       "      <td>0.264198</td>\n",
       "      <td>0.449764</td>\n",
       "      <td>0.387669</td>\n",
       "      <td>0.113730</td>\n",
       "      <td>0.209481</td>\n",
       "      <td>0.487923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7296</th>\n",
       "      <td>0.408466</td>\n",
       "      <td>0.324615</td>\n",
       "      <td>0.106973</td>\n",
       "      <td>0.329933</td>\n",
       "      <td>0.646029</td>\n",
       "      <td>0.315975</td>\n",
       "      <td>0.238321</td>\n",
       "      <td>0.275573</td>\n",
       "      <td>0.369504</td>\n",
       "      <td>0.470530</td>\n",
       "      <td>...</td>\n",
       "      <td>0.503675</td>\n",
       "      <td>0.297678</td>\n",
       "      <td>0.569410</td>\n",
       "      <td>0.430868</td>\n",
       "      <td>0.231182</td>\n",
       "      <td>0.419432</td>\n",
       "      <td>0.499206</td>\n",
       "      <td>0.186971</td>\n",
       "      <td>0.320613</td>\n",
       "      <td>0.128360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7297</th>\n",
       "      <td>0.313476</td>\n",
       "      <td>0.222590</td>\n",
       "      <td>0.118331</td>\n",
       "      <td>0.391503</td>\n",
       "      <td>0.559734</td>\n",
       "      <td>0.326986</td>\n",
       "      <td>0.131878</td>\n",
       "      <td>0.253487</td>\n",
       "      <td>0.309301</td>\n",
       "      <td>0.531360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.457328</td>\n",
       "      <td>0.383662</td>\n",
       "      <td>0.541207</td>\n",
       "      <td>0.317894</td>\n",
       "      <td>0.131005</td>\n",
       "      <td>0.710880</td>\n",
       "      <td>0.426883</td>\n",
       "      <td>0.297451</td>\n",
       "      <td>0.341163</td>\n",
       "      <td>0.377458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7298</th>\n",
       "      <td>0.259787</td>\n",
       "      <td>0.282880</td>\n",
       "      <td>0.184674</td>\n",
       "      <td>0.345943</td>\n",
       "      <td>0.487777</td>\n",
       "      <td>0.376472</td>\n",
       "      <td>0.293157</td>\n",
       "      <td>0.252549</td>\n",
       "      <td>0.404114</td>\n",
       "      <td>0.593921</td>\n",
       "      <td>...</td>\n",
       "      <td>0.255773</td>\n",
       "      <td>0.486322</td>\n",
       "      <td>0.685031</td>\n",
       "      <td>0.481931</td>\n",
       "      <td>0.211673</td>\n",
       "      <td>0.495832</td>\n",
       "      <td>0.708930</td>\n",
       "      <td>0.131320</td>\n",
       "      <td>0.440861</td>\n",
       "      <td>0.565857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7299</th>\n",
       "      <td>0.465886</td>\n",
       "      <td>0.394399</td>\n",
       "      <td>0.266543</td>\n",
       "      <td>0.395657</td>\n",
       "      <td>0.127682</td>\n",
       "      <td>0.406075</td>\n",
       "      <td>0.310096</td>\n",
       "      <td>0.242692</td>\n",
       "      <td>0.270552</td>\n",
       "      <td>0.600911</td>\n",
       "      <td>...</td>\n",
       "      <td>0.299969</td>\n",
       "      <td>0.327592</td>\n",
       "      <td>0.380153</td>\n",
       "      <td>0.387216</td>\n",
       "      <td>0.388519</td>\n",
       "      <td>0.494057</td>\n",
       "      <td>0.313142</td>\n",
       "      <td>0.298064</td>\n",
       "      <td>0.568071</td>\n",
       "      <td>0.233688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1969 rows × 16195 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1         2         3         4         5         6      \\\n",
       "MB-0000  0.418219  0.152488  0.167391  0.193790  0.085427  0.464295  0.104066   \n",
       "MB-0002  0.405360  0.491409  0.398066  0.434640  0.157899  0.516106  0.099787   \n",
       "MB-0005  0.176485  0.167589  0.223399  0.309239  0.136554  0.146337  0.102777   \n",
       "MB-0006  0.303367  0.089394  0.280586  0.281603  0.207387  0.316298  0.182998   \n",
       "MB-0008  0.596919  0.470614  0.328998  0.339462  0.248083  0.302336  0.207619   \n",
       "...           ...       ...       ...       ...       ...       ...       ...   \n",
       "MB-7295  0.457776  0.179208  0.169827  0.288497  0.314609  0.251180  0.234931   \n",
       "MB-7296  0.408466  0.324615  0.106973  0.329933  0.646029  0.315975  0.238321   \n",
       "MB-7297  0.313476  0.222590  0.118331  0.391503  0.559734  0.326986  0.131878   \n",
       "MB-7298  0.259787  0.282880  0.184674  0.345943  0.487777  0.376472  0.293157   \n",
       "MB-7299  0.465886  0.394399  0.266543  0.395657  0.127682  0.406075  0.310096   \n",
       "\n",
       "            7         8         9      ...     16185     16186     16187  \\\n",
       "MB-0000  0.290806  0.272616  0.580954  ...  0.285407  0.403359  0.548733   \n",
       "MB-0002  0.354238  0.288308  0.731903  ...  0.552136  0.331161  0.547798   \n",
       "MB-0005  0.174579  0.314562  0.555112  ...  0.537151  0.446916  0.660317   \n",
       "MB-0006  0.140095  0.233456  0.505399  ...  0.350992  0.546245  0.483318   \n",
       "MB-0008  0.179386  0.263447  0.633223  ...  0.576174  0.267847  0.508746   \n",
       "...           ...       ...       ...  ...       ...       ...       ...   \n",
       "MB-7295  0.221818  0.225260  0.470970  ...  0.518137  0.348740  0.452896   \n",
       "MB-7296  0.275573  0.369504  0.470530  ...  0.503675  0.297678  0.569410   \n",
       "MB-7297  0.253487  0.309301  0.531360  ...  0.457328  0.383662  0.541207   \n",
       "MB-7298  0.252549  0.404114  0.593921  ...  0.255773  0.486322  0.685031   \n",
       "MB-7299  0.242692  0.270552  0.600911  ...  0.299969  0.327592  0.380153   \n",
       "\n",
       "            16188     16189     16190     16191     16192     16193     16194  \n",
       "MB-0000  0.403750  0.194559  0.657663  0.494058  0.306183  0.481686  0.308071  \n",
       "MB-0002  0.475887  0.306815  0.432194  0.426856  0.287898  0.560337  0.589266  \n",
       "MB-0005  0.350423  0.181673  0.568682  0.317989  0.192962  0.548685  0.711381  \n",
       "MB-0006  0.471808  0.292479  0.496924  0.663253  0.280508  0.592944  0.292956  \n",
       "MB-0008  0.519425  0.309202  0.461302  0.337007  0.173220  0.378357  0.474492  \n",
       "...           ...       ...       ...       ...       ...       ...       ...  \n",
       "MB-7295  0.279217  0.264198  0.449764  0.387669  0.113730  0.209481  0.487923  \n",
       "MB-7296  0.430868  0.231182  0.419432  0.499206  0.186971  0.320613  0.128360  \n",
       "MB-7297  0.317894  0.131005  0.710880  0.426883  0.297451  0.341163  0.377458  \n",
       "MB-7298  0.481931  0.211673  0.495832  0.708930  0.131320  0.440861  0.565857  \n",
       "MB-7299  0.387216  0.388519  0.494057  0.313142  0.298064  0.568071  0.233688  \n",
       "\n",
       "[1969 rows x 16195 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bulk = torch.load('../result/Metabric_20241003_115435/bulk_tensor.pt', map_location=torch.device('cpu'))\n",
    "bulk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "92cf4d06-2fff-41ac-8c0a-e7df3cd10057",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "      <th>60</th>\n",
       "      <th>61</th>\n",
       "      <th>62</th>\n",
       "      <th>63</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MB-0000</th>\n",
       "      <td>3.367993</td>\n",
       "      <td>2.454591</td>\n",
       "      <td>0.396031</td>\n",
       "      <td>2.251722</td>\n",
       "      <td>-1.166403</td>\n",
       "      <td>-0.021400</td>\n",
       "      <td>4.800584</td>\n",
       "      <td>0.840175</td>\n",
       "      <td>-3.104042</td>\n",
       "      <td>1.763394</td>\n",
       "      <td>...</td>\n",
       "      <td>1.831564</td>\n",
       "      <td>-1.950852</td>\n",
       "      <td>-2.416824</td>\n",
       "      <td>-3.301344</td>\n",
       "      <td>1.651011</td>\n",
       "      <td>-3.131365</td>\n",
       "      <td>-0.599215</td>\n",
       "      <td>3.455551</td>\n",
       "      <td>4.887055</td>\n",
       "      <td>-1.419669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0002</th>\n",
       "      <td>3.418086</td>\n",
       "      <td>2.373406</td>\n",
       "      <td>0.473487</td>\n",
       "      <td>2.787076</td>\n",
       "      <td>-0.921876</td>\n",
       "      <td>0.266424</td>\n",
       "      <td>4.794516</td>\n",
       "      <td>0.726922</td>\n",
       "      <td>-2.860147</td>\n",
       "      <td>1.623869</td>\n",
       "      <td>...</td>\n",
       "      <td>1.677197</td>\n",
       "      <td>-1.758697</td>\n",
       "      <td>-1.859598</td>\n",
       "      <td>-2.589670</td>\n",
       "      <td>1.487232</td>\n",
       "      <td>-2.172613</td>\n",
       "      <td>-0.609000</td>\n",
       "      <td>3.183873</td>\n",
       "      <td>4.631154</td>\n",
       "      <td>-1.590559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0005</th>\n",
       "      <td>2.639949</td>\n",
       "      <td>2.667727</td>\n",
       "      <td>0.546380</td>\n",
       "      <td>1.146631</td>\n",
       "      <td>-2.285479</td>\n",
       "      <td>0.103093</td>\n",
       "      <td>6.077667</td>\n",
       "      <td>0.114848</td>\n",
       "      <td>-2.403615</td>\n",
       "      <td>0.375730</td>\n",
       "      <td>...</td>\n",
       "      <td>0.297471</td>\n",
       "      <td>-2.438496</td>\n",
       "      <td>-0.903863</td>\n",
       "      <td>-2.677880</td>\n",
       "      <td>1.743609</td>\n",
       "      <td>-1.630860</td>\n",
       "      <td>-1.225156</td>\n",
       "      <td>5.503779</td>\n",
       "      <td>3.151568</td>\n",
       "      <td>0.361206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0006</th>\n",
       "      <td>2.592669</td>\n",
       "      <td>2.784243</td>\n",
       "      <td>0.564681</td>\n",
       "      <td>1.074884</td>\n",
       "      <td>-2.522613</td>\n",
       "      <td>0.204542</td>\n",
       "      <td>6.302675</td>\n",
       "      <td>-0.098679</td>\n",
       "      <td>-2.176522</td>\n",
       "      <td>0.294885</td>\n",
       "      <td>...</td>\n",
       "      <td>0.185489</td>\n",
       "      <td>-2.528005</td>\n",
       "      <td>-0.602681</td>\n",
       "      <td>-2.898635</td>\n",
       "      <td>1.759679</td>\n",
       "      <td>-1.650509</td>\n",
       "      <td>-1.473126</td>\n",
       "      <td>5.617110</td>\n",
       "      <td>3.107990</td>\n",
       "      <td>0.659815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-0008</th>\n",
       "      <td>3.867355</td>\n",
       "      <td>2.591439</td>\n",
       "      <td>0.148763</td>\n",
       "      <td>3.084111</td>\n",
       "      <td>-1.015103</td>\n",
       "      <td>0.348769</td>\n",
       "      <td>5.170732</td>\n",
       "      <td>0.948249</td>\n",
       "      <td>-3.405766</td>\n",
       "      <td>1.547863</td>\n",
       "      <td>...</td>\n",
       "      <td>1.633737</td>\n",
       "      <td>-1.994291</td>\n",
       "      <td>-2.108958</td>\n",
       "      <td>-2.810527</td>\n",
       "      <td>1.285653</td>\n",
       "      <td>-2.225590</td>\n",
       "      <td>-0.748945</td>\n",
       "      <td>3.602156</td>\n",
       "      <td>4.996774</td>\n",
       "      <td>-1.761734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7295</th>\n",
       "      <td>3.779907</td>\n",
       "      <td>2.649712</td>\n",
       "      <td>0.242443</td>\n",
       "      <td>2.433421</td>\n",
       "      <td>-0.984191</td>\n",
       "      <td>-0.053913</td>\n",
       "      <td>5.044425</td>\n",
       "      <td>0.771440</td>\n",
       "      <td>-3.861327</td>\n",
       "      <td>1.450718</td>\n",
       "      <td>...</td>\n",
       "      <td>1.449849</td>\n",
       "      <td>-2.255793</td>\n",
       "      <td>-2.508251</td>\n",
       "      <td>-3.327261</td>\n",
       "      <td>1.232744</td>\n",
       "      <td>-2.476962</td>\n",
       "      <td>-0.814357</td>\n",
       "      <td>3.906678</td>\n",
       "      <td>4.721195</td>\n",
       "      <td>-1.361315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7296</th>\n",
       "      <td>3.641036</td>\n",
       "      <td>2.388892</td>\n",
       "      <td>0.130207</td>\n",
       "      <td>2.965937</td>\n",
       "      <td>-1.267599</td>\n",
       "      <td>0.480696</td>\n",
       "      <td>5.130350</td>\n",
       "      <td>0.711548</td>\n",
       "      <td>-2.820846</td>\n",
       "      <td>1.270881</td>\n",
       "      <td>...</td>\n",
       "      <td>1.280407</td>\n",
       "      <td>-1.995515</td>\n",
       "      <td>-1.640370</td>\n",
       "      <td>-2.819098</td>\n",
       "      <td>1.255270</td>\n",
       "      <td>-1.931419</td>\n",
       "      <td>-0.778759</td>\n",
       "      <td>3.747978</td>\n",
       "      <td>4.710711</td>\n",
       "      <td>-1.341518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7297</th>\n",
       "      <td>3.717734</td>\n",
       "      <td>2.682518</td>\n",
       "      <td>-0.003620</td>\n",
       "      <td>2.721993</td>\n",
       "      <td>-1.555269</td>\n",
       "      <td>0.619089</td>\n",
       "      <td>5.636031</td>\n",
       "      <td>0.081664</td>\n",
       "      <td>-2.998738</td>\n",
       "      <td>1.250510</td>\n",
       "      <td>...</td>\n",
       "      <td>1.142659</td>\n",
       "      <td>-2.257976</td>\n",
       "      <td>-1.444936</td>\n",
       "      <td>-3.277513</td>\n",
       "      <td>1.230069</td>\n",
       "      <td>-1.693589</td>\n",
       "      <td>-1.121933</td>\n",
       "      <td>4.077220</td>\n",
       "      <td>4.704343</td>\n",
       "      <td>-0.823886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7298</th>\n",
       "      <td>3.776580</td>\n",
       "      <td>2.697011</td>\n",
       "      <td>0.203443</td>\n",
       "      <td>3.077998</td>\n",
       "      <td>-1.108042</td>\n",
       "      <td>0.556768</td>\n",
       "      <td>5.165533</td>\n",
       "      <td>0.501520</td>\n",
       "      <td>-3.074845</td>\n",
       "      <td>1.751862</td>\n",
       "      <td>...</td>\n",
       "      <td>1.773979</td>\n",
       "      <td>-1.921735</td>\n",
       "      <td>-1.751139</td>\n",
       "      <td>-3.212091</td>\n",
       "      <td>1.198934</td>\n",
       "      <td>-2.305824</td>\n",
       "      <td>-0.977196</td>\n",
       "      <td>3.190497</td>\n",
       "      <td>5.197777</td>\n",
       "      <td>-1.548899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MB-7299</th>\n",
       "      <td>3.902739</td>\n",
       "      <td>2.716915</td>\n",
       "      <td>0.055271</td>\n",
       "      <td>2.868853</td>\n",
       "      <td>-1.367536</td>\n",
       "      <td>0.410010</td>\n",
       "      <td>5.383346</td>\n",
       "      <td>0.261302</td>\n",
       "      <td>-3.294528</td>\n",
       "      <td>1.542271</td>\n",
       "      <td>...</td>\n",
       "      <td>1.425123</td>\n",
       "      <td>-2.281892</td>\n",
       "      <td>-1.855435</td>\n",
       "      <td>-3.785024</td>\n",
       "      <td>1.079073</td>\n",
       "      <td>-2.355585</td>\n",
       "      <td>-1.087769</td>\n",
       "      <td>3.670794</td>\n",
       "      <td>5.167312</td>\n",
       "      <td>-1.249626</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1969 rows × 64 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               0         1         2         3         4         5         6   \\\n",
       "MB-0000  3.367993  2.454591  0.396031  2.251722 -1.166403 -0.021400  4.800584   \n",
       "MB-0002  3.418086  2.373406  0.473487  2.787076 -0.921876  0.266424  4.794516   \n",
       "MB-0005  2.639949  2.667727  0.546380  1.146631 -2.285479  0.103093  6.077667   \n",
       "MB-0006  2.592669  2.784243  0.564681  1.074884 -2.522613  0.204542  6.302675   \n",
       "MB-0008  3.867355  2.591439  0.148763  3.084111 -1.015103  0.348769  5.170732   \n",
       "...           ...       ...       ...       ...       ...       ...       ...   \n",
       "MB-7295  3.779907  2.649712  0.242443  2.433421 -0.984191 -0.053913  5.044425   \n",
       "MB-7296  3.641036  2.388892  0.130207  2.965937 -1.267599  0.480696  5.130350   \n",
       "MB-7297  3.717734  2.682518 -0.003620  2.721993 -1.555269  0.619089  5.636031   \n",
       "MB-7298  3.776580  2.697011  0.203443  3.077998 -1.108042  0.556768  5.165533   \n",
       "MB-7299  3.902739  2.716915  0.055271  2.868853 -1.367536  0.410010  5.383346   \n",
       "\n",
       "               7         8         9   ...        54        55        56  \\\n",
       "MB-0000  0.840175 -3.104042  1.763394  ...  1.831564 -1.950852 -2.416824   \n",
       "MB-0002  0.726922 -2.860147  1.623869  ...  1.677197 -1.758697 -1.859598   \n",
       "MB-0005  0.114848 -2.403615  0.375730  ...  0.297471 -2.438496 -0.903863   \n",
       "MB-0006 -0.098679 -2.176522  0.294885  ...  0.185489 -2.528005 -0.602681   \n",
       "MB-0008  0.948249 -3.405766  1.547863  ...  1.633737 -1.994291 -2.108958   \n",
       "...           ...       ...       ...  ...       ...       ...       ...   \n",
       "MB-7295  0.771440 -3.861327  1.450718  ...  1.449849 -2.255793 -2.508251   \n",
       "MB-7296  0.711548 -2.820846  1.270881  ...  1.280407 -1.995515 -1.640370   \n",
       "MB-7297  0.081664 -2.998738  1.250510  ...  1.142659 -2.257976 -1.444936   \n",
       "MB-7298  0.501520 -3.074845  1.751862  ...  1.773979 -1.921735 -1.751139   \n",
       "MB-7299  0.261302 -3.294528  1.542271  ...  1.425123 -2.281892 -1.855435   \n",
       "\n",
       "               57        58        59        60        61        62        63  \n",
       "MB-0000 -3.301344  1.651011 -3.131365 -0.599215  3.455551  4.887055 -1.419669  \n",
       "MB-0002 -2.589670  1.487232 -2.172613 -0.609000  3.183873  4.631154 -1.590559  \n",
       "MB-0005 -2.677880  1.743609 -1.630860 -1.225156  5.503779  3.151568  0.361206  \n",
       "MB-0006 -2.898635  1.759679 -1.650509 -1.473126  5.617110  3.107990  0.659815  \n",
       "MB-0008 -2.810527  1.285653 -2.225590 -0.748945  3.602156  4.996774 -1.761734  \n",
       "...           ...       ...       ...       ...       ...       ...       ...  \n",
       "MB-7295 -3.327261  1.232744 -2.476962 -0.814357  3.906678  4.721195 -1.361315  \n",
       "MB-7296 -2.819098  1.255270 -1.931419 -0.778759  3.747978  4.710711 -1.341518  \n",
       "MB-7297 -3.277513  1.230069 -1.693589 -1.121933  4.077220  4.704343 -0.823886  \n",
       "MB-7298 -3.212091  1.198934 -2.305824 -0.977196  3.190497  5.197777 -1.548899  \n",
       "MB-7299 -3.785024  1.079073 -2.355585 -1.087769  3.670794  5.167312 -1.249626  \n",
       "\n",
       "[1969 rows x 64 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "embedding = torch.load('../result/Metabric_20241003_115435/embedding.pt', map_location=torch.device('cpu'))\n",
    "embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a026c1f9-a321-4300-8b92-e46d0cd812e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from lifelines import CoxPHFitter, KaplanMeierFitter\n",
    "from lifelines.utils import concordance_index\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def survival_analysis_with_lifelines(surv, bulk, test_size=0.2, random_state=42):\n",
    "    \"\"\"\n",
    "    Perform survival analysis using lifelines with Cox Proportional Hazards model and Kaplan-Meier estimation.\n",
    "    \n",
    "    Parameters:\n",
    "        surv (pd.DataFrame): DataFrame containing survival data with 'time' and 'status' columns.\n",
    "        bulk (pd.DataFrame): DataFrame containing gene expression data.\n",
    "        test_size (float): Proportion of the dataset to include in the test split.\n",
    "        random_state (int): Seed used by the random number generator.\n",
    "    \"\"\"\n",
    "    # 1. Data Preprocessing: Select common samples and filter data\n",
    "    common_samples = np.intersect1d(surv.index, bulk.index)\n",
    "    surv = surv.loc[common_samples]\n",
    "    bulk = bulk.loc[common_samples]\n",
    "\n",
    "    # 2. Combine survival and expression data into one DataFrame for lifelines\n",
    "    data = pd.concat([surv, bulk], axis=1)\n",
    "\n",
    "    # 3. Split the data into training and testing sets\n",
    "    train_data, test_data = train_test_split(data, test_size=test_size, random_state=random_state)\n",
    "    print(f\"Training set size: {train_data.shape}, Test set size: {test_data.shape}\")\n",
    "\n",
    "    # 4. Fit Cox Proportional Hazards model on training set\n",
    "    cph = CoxPHFitter()\n",
    "    cph.fit(train_data, duration_col='time', event_col='status')\n",
    "    \n",
    "    # 5. Print model summary and coefficients\n",
    "    print(cph.summary)\n",
    "\n",
    "    # 6. Calculate C-index on training and testing sets\n",
    "    train_c_index = cph.concordance_index_\n",
    "    test_c_index = concordance_index(test_data['time'], -cph.predict_partial_hazard(test_data), test_data['status'])\n",
    "    print(f\"C-Index on Training Set: {train_c_index}\")\n",
    "    print(f\"C-Index on Test Set: {test_c_index}\")\n",
    "\n",
    "    # 7. Predict and plot the survival function for a random sample from the test set\n",
    "    random_sample = test_data.sample(n=1, random_state=random_state)\n",
    "    surv_func = cph.predict_survival_function(random_sample)\n",
    "    \n",
    "    # Plot survival function for random sample\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    surv_func.plot()\n",
    "    plt.title(\"Survival Function for Random Test Sample\")\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.ylabel(\"Survival Probability\")\n",
    "    plt.show()\n",
    "\n",
    "    # 8. Split test samples into high-risk and low-risk groups based on median predicted risk\n",
    "    risk_scores = cph.predict_partial_hazard(test_data)\n",
    "    risk_threshold = risk_scores.median()\n",
    "    high_risk = test_data[risk_scores > risk_threshold]\n",
    "    low_risk = test_data[risk_scores <= risk_threshold]\n",
    "\n",
    "    # 9. Compute Kaplan-Meier survival curves for each group in the test set\n",
    "    kmf_high = KaplanMeierFitter()\n",
    "    kmf_high.fit(high_risk['time'], event_observed=high_risk['status'], label='High Risk (Test)')\n",
    "    \n",
    "    kmf_low = KaplanMeierFitter()\n",
    "    kmf_low.fit(low_risk['time'], event_observed=low_risk['status'], label='Low Risk (Test)')\n",
    "\n",
    "    # 10. Plot Kaplan-Meier survival curves\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    kmf_high.plot()\n",
    "    kmf_low.plot()\n",
    "    plt.ylim(0, 1)\n",
    "    plt.ylabel(r\"Estimated probability of survival $\\hat{S}(t)$\")\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.title(\"Kaplan-Meier Survival Curves (Test Set)\")\n",
    "    plt.legend()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c2da0af2-e26c-48e8-92f7-8bf72a0cce2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def survival_analysis_with_pam50_lifelines(surv, pam50_labels):\n",
    "    # 1. Data preprocessing: Ensure that the indices of surv and pam50_labels are aligned to find common samples\n",
    "    if isinstance(pam50_labels, pd.DataFrame):\n",
    "        if \"Pam50Subtype\" in pam50_labels.columns:\n",
    "            pam50_labels = pam50_labels[\"Pam50Subtype\"]\n",
    "        else:\n",
    "            raise ValueError(\"pam50_labels does not contain a column named 'Pam50Subtype'.\")\n",
    "\n",
    "    # 2. Align common samples\n",
    "    common_samples = surv.index.intersection(pam50_labels.index)\n",
    "    surv = surv.loc[common_samples]\n",
    "    pam50_labels = pam50_labels.loc[common_samples]\n",
    "\n",
    "    # 3. Encode the PAM50 labels into numerical values for Cox model input\n",
    "    label_encoder = LabelEncoder()\n",
    "    pam50_encoded = label_encoder.fit_transform(pam50_labels)\n",
    "\n",
    "    # Create a DataFrame with the encoded PAM50 labels and survival data\n",
    "    data = pd.DataFrame({\n",
    "        'time': surv['time'],\n",
    "        'status': surv['status'],\n",
    "        'Pam50Subtype': pam50_encoded\n",
    "    })\n",
    "\n",
    "    # 4. Fit Cox Proportional Hazards model\n",
    "    cph = CoxPHFitter()\n",
    "    cph.fit(data, duration_col='time', event_col='status')\n",
    "\n",
    "    # Print model summary\n",
    "    print(cph.summary)\n",
    "\n",
    "    # 5. Calculate C-index\n",
    "    c_index = cph.concordance_index_\n",
    "    print(f\"C-Index: {c_index}\")\n",
    "\n",
    "    # Step 6: Plot Kaplan-Meier survival curves for each PAM50 subtype\n",
    "    plt.figure(figsize=(10, 7))\n",
    "    pam50_subtypes = label_encoder.classes_  # Get unique PAM50 subtypes\n",
    "\n",
    "    for subtype in pam50_subtypes:\n",
    "        # Filter the samples based on the current PAM50 subtype\n",
    "        mask = pam50_labels == subtype  # Boolean mask\n",
    "        kmf = KaplanMeierFitter()\n",
    "        kmf.fit(data.loc[mask, 'time'], event_observed=data.loc[mask, 'status'], label=subtype)\n",
    "\n",
    "        # Plot the survival curve for the subtype\n",
    "        kmf.plot_survival_function()\n",
    "\n",
    "    # Set labels and title\n",
    "    plt.ylim(0, 1)\n",
    "    plt.ylabel(r\"Estimated probability of survival $\\hat{S}(t)$\")\n",
    "    plt.xlabel(\"Time\")\n",
    "    plt.title(\"Kaplan-Meier Survival Curves for Different PAM50 Subtypes\")\n",
    "    plt.legend()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b09b2a7c-eca1-4ae9-9fed-3e12cda455a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  coef  exp(coef)  se(coef)  coef lower 95%  coef upper 95%  \\\n",
      "covariate                                                                     \n",
      "Pam50Subtype -0.025021   0.975289  0.025959         -0.0759        0.025858   \n",
      "\n",
      "              exp(coef) lower 95%  exp(coef) upper 95%  cmp to         z  \\\n",
      "covariate                                                                  \n",
      "Pam50Subtype             0.926909             1.026195     0.0 -0.963869   \n",
      "\n",
      "                     p  -log2(p)  \n",
      "covariate                         \n",
      "Pam50Subtype  0.335112  1.577285  \n",
      "C-Index: 0.5235784000081248\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "survival_analysis_with_pam50_lifelines(surv, pam50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f019dc16-1593-4130-987d-cfc4e8a15f9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: (1575, 16197), Test set size: (394, 16197)\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[12], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43msurvival_analysis_with_lifelines\u001b[49m\u001b[43m(\u001b[49m\u001b[43msurv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbulk\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[1;32mIn[6], line 33\u001b[0m, in \u001b[0;36msurvival_analysis_with_lifelines\u001b[1;34m(surv, bulk, test_size, random_state)\u001b[0m\n\u001b[0;32m     31\u001b[0m \u001b[38;5;66;03m# 4. Fit Cox Proportional Hazards model on training set\u001b[39;00m\n\u001b[0;32m     32\u001b[0m cph \u001b[38;5;241m=\u001b[39m CoxPHFitter()\n\u001b[1;32m---> 33\u001b[0m \u001b[43mcph\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mduration_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtime\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mevent_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mstatus\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m     35\u001b[0m \u001b[38;5;66;03m# 5. Print model summary and coefficients\u001b[39;00m\n\u001b[0;32m     36\u001b[0m \u001b[38;5;28mprint\u001b[39m(cph\u001b[38;5;241m.\u001b[39msummary)\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\utils\\__init__.py:56\u001b[0m, in \u001b[0;36mCensoringType.right_censoring.<locals>.f\u001b[1;34m(model, *args, **kwargs)\u001b[0m\n\u001b[0;32m     53\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(function)\n\u001b[0;32m     54\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mf\u001b[39m(model, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m     55\u001b[0m     \u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39mset_censoring_type(model, \u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39mRIGHT)\n\u001b[1;32m---> 56\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:290\u001b[0m, in \u001b[0;36mCoxPHFitter.fit\u001b[1;34m(self, df, duration_col, event_col, show_progress, initial_point, strata, weights_col, cluster_col, robust, batch_mode, timeline, formula, entry_col, fit_options)\u001b[0m\n\u001b[0;32m    184\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    185\u001b[0m \u001b[38;5;124;03mFit the Cox proportional hazard model to a right-censored dataset. Alias of `fit_right_censoring`.\u001b[39;00m\n\u001b[0;32m    186\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    287\u001b[0m \n\u001b[0;32m    288\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    289\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrata \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39m_to_list_or_singleton(utils\u001b[38;5;241m.\u001b[39mcoalesce(strata, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrata))\n\u001b[1;32m--> 290\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_model \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit_model\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    291\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    292\u001b[0m \u001b[43m    \u001b[49m\u001b[43mduration_col\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    293\u001b[0m \u001b[43m    \u001b[49m\u001b[43mevent_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mevent_col\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    294\u001b[0m \u001b[43m    \u001b[49m\u001b[43mshow_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mshow_progress\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    295\u001b[0m \u001b[43m    \u001b[49m\u001b[43minitial_point\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_point\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    296\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstrata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstrata\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    297\u001b[0m \u001b[43m    \u001b[49m\u001b[43mweights_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mweights_col\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    298\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcluster_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcluster_col\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    299\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrobust\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrobust\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    300\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbatch_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    301\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeline\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    302\u001b[0m \u001b[43m    \u001b[49m\u001b[43mformula\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mformula\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    303\u001b[0m \u001b[43m    \u001b[49m\u001b[43mentry_col\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mentry_col\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    304\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfit_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfit_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    305\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    306\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:610\u001b[0m, in \u001b[0;36mCoxPHFitter._fit_model\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    608\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_fit_model\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m    609\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbaseline_estimation_method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbreslow\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 610\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit_model_breslow\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    611\u001b[0m     \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbaseline_estimation_method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mspline\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m    612\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_model_spline(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:623\u001b[0m, in \u001b[0;36mCoxPHFitter._fit_model_breslow\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    619\u001b[0m model \u001b[38;5;241m=\u001b[39m SemiParametricPHFitter(\n\u001b[0;32m    620\u001b[0m     penalizer\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpenalizer, l1_ratio\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39ml1_ratio, strata\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrata, alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39malpha, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_label\n\u001b[0;32m    621\u001b[0m )\n\u001b[0;32m    622\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m utils\u001b[38;5;241m.\u001b[39mCensoringType\u001b[38;5;241m.\u001b[39mis_right_censoring(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m--> 623\u001b[0m     \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    624\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m model\n\u001b[0;32m    625\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\utils\\__init__.py:56\u001b[0m, in \u001b[0;36mCensoringType.right_censoring.<locals>.f\u001b[1;34m(model, *args, **kwargs)\u001b[0m\n\u001b[0;32m     53\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(function)\n\u001b[0;32m     54\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mf\u001b[39m(model, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m     55\u001b[0m     \u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39mset_censoring_type(model, \u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m.\u001b[39mRIGHT)\n\u001b[1;32m---> 56\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:1252\u001b[0m, in \u001b[0;36mSemiParametricPHFitter.fit\u001b[1;34m(self, df, duration_col, event_col, show_progress, initial_point, strata, weights_col, cluster_col, robust, batch_mode, timeline, formula, entry_col, fit_options)\u001b[0m\n\u001b[0;32m   1247\u001b[0m \u001b[38;5;66;03m# this is surprisingly faster to do...\u001b[39;00m\n\u001b[0;32m   1248\u001b[0m X_norm \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(\n\u001b[0;32m   1249\u001b[0m     utils\u001b[38;5;241m.\u001b[39mnormalize(X\u001b[38;5;241m.\u001b[39mvalues, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_norm_mean\u001b[38;5;241m.\u001b[39mvalues, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_norm_std\u001b[38;5;241m.\u001b[39mvalues), index\u001b[38;5;241m=\u001b[39mX\u001b[38;5;241m.\u001b[39mindex, columns\u001b[38;5;241m=\u001b[39mX\u001b[38;5;241m.\u001b[39mcolumns\n\u001b[0;32m   1250\u001b[0m )\n\u001b[1;32m-> 1252\u001b[0m params_, ll_, variance_matrix_, baseline_hazard_, baseline_cumulative_hazard_, model \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit_model\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1253\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX_norm\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1254\u001b[0m \u001b[43m    \u001b[49m\u001b[43mT\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1255\u001b[0m \u001b[43m    \u001b[49m\u001b[43mE\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1256\u001b[0m \u001b[43m    \u001b[49m\u001b[43mweights\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mweights\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1257\u001b[0m \u001b[43m    \u001b[49m\u001b[43mentries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mentries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1258\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfit_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mutils\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcoalesce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfit_options\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1259\u001b[0m \u001b[43m    \u001b[49m\u001b[43minitial_point\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_point\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1260\u001b[0m \u001b[43m    \u001b[49m\u001b[43mshow_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mshow_progress\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1261\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1263\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog_likelihood_ \u001b[38;5;241m=\u001b[39m ll_\n\u001b[0;32m   1264\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel \u001b[38;5;241m=\u001b[39m model\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:1380\u001b[0m, in \u001b[0;36mSemiParametricPHFitter._fit_model\u001b[1;34m(self, X, T, E, weights, entries, fit_options, initial_point, show_progress)\u001b[0m\n\u001b[0;32m   1369\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_fit_model\u001b[39m(\n\u001b[0;32m   1370\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   1371\u001b[0m     X: DataFrame,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1378\u001b[0m     show_progress: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m   1379\u001b[0m ):\n\u001b[1;32m-> 1380\u001b[0m     beta_, ll_, hessian_ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_newton_raphson_for_efron_model\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1381\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1382\u001b[0m \u001b[43m        \u001b[49m\u001b[43mT\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1383\u001b[0m \u001b[43m        \u001b[49m\u001b[43mE\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1384\u001b[0m \u001b[43m        \u001b[49m\u001b[43mweights\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1385\u001b[0m \u001b[43m        \u001b[49m\u001b[43mentries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1386\u001b[0m \u001b[43m        \u001b[49m\u001b[43minitial_point\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minitial_point\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1387\u001b[0m \u001b[43m        \u001b[49m\u001b[43mshow_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mshow_progress\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1388\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1389\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1391\u001b[0m     \u001b[38;5;66;03m# compute the baseline hazard here.\u001b[39;00m\n\u001b[0;32m   1392\u001b[0m     predicted_partial_hazards_ \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m   1393\u001b[0m         pd\u001b[38;5;241m.\u001b[39mDataFrame(np\u001b[38;5;241m.\u001b[39mexp(dot(X, beta_)), columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mP\u001b[39m\u001b[38;5;124m\"\u001b[39m])\u001b[38;5;241m.\u001b[39massign(T\u001b[38;5;241m=\u001b[39mT\u001b[38;5;241m.\u001b[39mvalues, E\u001b[38;5;241m=\u001b[39mE\u001b[38;5;241m.\u001b[39mvalues, W\u001b[38;5;241m=\u001b[39mweights\u001b[38;5;241m.\u001b[39mvalues)\u001b[38;5;241m.\u001b[39mset_index(X\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m   1394\u001b[0m     )\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:1506\u001b[0m, in \u001b[0;36mSemiParametricPHFitter._newton_raphson_for_efron_model\u001b[1;34m(self, X, T, E, weights, entries, initial_point, show_progress, step_size, precision, r_precision, max_steps)\u001b[0m\n\u001b[0;32m   1502\u001b[0m i \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   1504\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstrata \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 1506\u001b[0m     h, g, ll_ \u001b[38;5;241m=\u001b[39m \u001b[43mget_gradients\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mT\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweights\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mentries\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbeta\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1508\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1509\u001b[0m     g \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mzeros_like(beta)\n",
      "File \u001b[1;32mc:\\users\\zhengzh\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\lifelines\\fitters\\coxph_fitter.py:1696\u001b[0m, in \u001b[0;36mSemiParametricPHFitter._get_efron_values_single\u001b[1;34m(self, X, T, E, weights, entries, beta)\u001b[0m\n\u001b[0;32m   1694\u001b[0m phi_x_i \u001b[38;5;241m=\u001b[39m phi_x_is[i]\n\u001b[0;32m   1695\u001b[0m \u001b[38;5;66;03m# https://stackoverflow.com/a/51481295/1895939\u001b[39;00m\n\u001b[1;32m-> 1696\u001b[0m phi_x_x_i \u001b[38;5;241m=\u001b[39m \u001b[43mmultiply\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mouter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mxi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mphi_x_i\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1698\u001b[0m \u001b[38;5;66;03m# Calculate sums of Risk set\u001b[39;00m\n\u001b[0;32m   1699\u001b[0m risk_phi \u001b[38;5;241m=\u001b[39m risk_phi \u001b[38;5;241m+\u001b[39m phi_i\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "survival_analysis_with_lifelines(surv, bulk)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bccf9f4b-d1a5-413e-8dd5-44732bf14982",
   "metadata": {},
   "outputs": [],
   "source": [
    "survival_analysis_with_lifelines(surv, embedding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05f35d8d-76b5-4488-8629-795cd28abe11",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
